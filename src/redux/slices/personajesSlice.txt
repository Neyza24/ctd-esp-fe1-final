import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { IPersonaje } from "../types/types";


interface IState{
    personajesList: IPersonaje[],
    error: string | undefined
    
}
const initialState: IState = {
    personajesList: [],
    error: ''
}

//queries
export const apiPersonajes = async(page: number) => {
    const response = await fetch(`https://rickandmortyapi.com/api/character/?page=${page}`);
        if(response.ok) {
            const data = await response.json();
            return data
            
        } else {
            throw new Error('Página no encontrada')
        }
}

export const apiPersonajeName = async(name: string) => {
    const response = await fetch(`https://rickandmortyapi.com/api/character/?name=${name}&status=alive`);
    if(response.ok) {
        const data = await response.json();
        return data
        
    } else {
        throw new Error('El nombre pasado por parámetro no existe')
    }
}
//    export const apiPersonajeName = async(name: string) => {
//     const response = await fetch(`https://rickandmortyapi.com/api/character/?name=${name}&status=alive`
//     );
//     //completar
//characters.filter((personaje: IPersonaje) => personaje.name.toLowerCase().startsWith(name.toLowerCase()))
//    }

export const getPersonajes = createAsyncThunk(
    '/getPersonajes',
    async(page: number) => {
        const response = await apiPersonajes(page)
        return response;
    }
)

export const getPersonajeName = createAsyncThunk(
    'getPersonajeName',
    async(name: string) => {
        const response = await apiPersonajeName(name);
        return response
    }
)


//cada builder va ser un estdo de nuestras acciones
const personajesSlice = createSlice({
    name: 'personaje',
    initialState,
    reducers: {},
    extraReducers(builder){
        builder.addCase(
            getPersonajes.fulfilled, (state, action) => {
                state.personajesList = action.payload;
                state.error = 'hay un error';
                
            }
        )
        

    }
})


export default personajesSlice.reducer;